"""Initial database schema

Revision ID: 2ff41162417f
Revises: 
Create Date: 2025-08-25 03:33:01.154177

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision = '2ff41162417f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('documents',
    sa.Column('doc_id', sa.String(), nullable=False),
    sa.Column('tenant_id', sa.String(), nullable=False),
    sa.Column('kb_id', sa.String(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('processing_stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('checksum', sa.String(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('doc_id')
    )
    op.create_index(op.f('ix_documents_kb_id'), 'documents', ['kb_id'], unique=False)
    op.create_index(op.f('ix_documents_tenant_id'), 'documents', ['tenant_id'], unique=False)
    op.create_table('embeddings',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('tenant_id', sa.String(), nullable=False),
    sa.Column('kb_id', sa.String(), nullable=False),
    sa.Column('owner_type', sa.Enum('chunk', 'tree_node', name='embedding_owner_type'), nullable=False),
    sa.Column('owner_id', sa.String(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('dimension', sa.Integer(), nullable=False),
    sa.Column('vector', pgvector.sqlalchemy.vector.VECTOR(dim=1024), nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_embeddings_kb_id'), 'embeddings', ['kb_id'], unique=False)
    op.create_index(op.f('ix_embeddings_owner_id'), 'embeddings', ['owner_id'], unique=False)
    op.create_index(op.f('ix_embeddings_owner_type'), 'embeddings', ['owner_type'], unique=False)
    op.create_index(op.f('ix_embeddings_tenant_id'), 'embeddings', ['tenant_id'], unique=False)
    op.create_index('ix_embeddings_tenant_kb_owner', 'embeddings', ['tenant_id', 'kb_id', 'owner_type', 'owner_id'], unique=False)
    op.create_index('ix_embeddings_vector_hnsw', 'embeddings', ['vector'], unique=False, postgresql_using='hnsw', postgresql_ops={'vector': 'vector_cosine_ops'})
    op.create_index('ix_embeddings_vector_ivfflat', 'embeddings', ['vector'], unique=False, postgresql_using='ivfflat', postgresql_ops={'vector': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.create_table('chunks',
    sa.Column('chunk_id', sa.String(), nullable=False),
    sa.Column('doc_id', sa.String(), nullable=False),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('token_count', sa.Integer(), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['doc_id'], ['documents.doc_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('chunk_id'),
    sa.UniqueConstraint('doc_id', 'chunk_index', name='uq_chunks_doc_index')
    )
    op.create_index('ix_chunks_doc_index', 'chunks', ['doc_id', 'chunk_index'], unique=False)
    op.create_table('raptor_trees',
    sa.Column('tree_id', sa.String(), nullable=False),
    sa.Column('doc_id', sa.String(), nullable=False),
    sa.Column('tenant_id', sa.String(), nullable=False),
    sa.Column('kb_id', sa.String(), nullable=False),
    sa.Column('total_levels', sa.Integer(), nullable=False),
    sa.Column('total_nodes', sa.Integer(), nullable=False),
    sa.Column('algorithm', sa.String(), nullable=False),
    sa.Column('params', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['doc_id'], ['documents.doc_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('tree_id')
    )
    op.create_index(op.f('ix_raptor_trees_kb_id'), 'raptor_trees', ['kb_id'], unique=False)
    op.create_index(op.f('ix_raptor_trees_tenant_id'), 'raptor_trees', ['tenant_id'], unique=False)
    op.create_table('raptor_tree_nodes',
    sa.Column('node_id', sa.String(), nullable=False),
    sa.Column('tree_id', sa.String(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('kind', sa.Enum('leaf', 'parent', 'root', name='raptor_node_kind'), nullable=False),
    sa.Column('cluster_id', sa.String(), nullable=True),
    sa.Column('layer_order', sa.Integer(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('parent_ids', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('leaf_count', sa.Integer(), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tree_id'], ['raptor_trees.tree_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('node_id')
    )
    op.create_index(op.f('ix_raptor_tree_nodes_kind'), 'raptor_tree_nodes', ['kind'], unique=False)
    op.create_index(op.f('ix_raptor_tree_nodes_level'), 'raptor_tree_nodes', ['level'], unique=False)
    op.create_index(op.f('ix_raptor_tree_nodes_tree_id'), 'raptor_tree_nodes', ['tree_id'], unique=False)
    op.create_index('ix_tree_nodes_tree_level', 'raptor_tree_nodes', ['tree_id', 'level'], unique=False)
    op.create_table('raptor_tree_edges',
    sa.Column('parent_id', sa.String(), nullable=False),
    sa.Column('child_id', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['child_id'], ['raptor_tree_nodes.node_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['raptor_tree_nodes.node_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('parent_id', 'child_id')
    )
    op.create_index('ix_tree_edges_child', 'raptor_tree_edges', ['child_id'], unique=False)
    op.create_index('ix_tree_edges_parent', 'raptor_tree_edges', ['parent_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_tree_edges_parent', table_name='raptor_tree_edges')
    op.drop_index('ix_tree_edges_child', table_name='raptor_tree_edges')
    op.drop_table('raptor_tree_edges')
    op.drop_index('ix_tree_nodes_tree_level', table_name='raptor_tree_nodes')
    op.drop_index(op.f('ix_raptor_tree_nodes_tree_id'), table_name='raptor_tree_nodes')
    op.drop_index(op.f('ix_raptor_tree_nodes_level'), table_name='raptor_tree_nodes')
    op.drop_index(op.f('ix_raptor_tree_nodes_kind'), table_name='raptor_tree_nodes')
    op.drop_table('raptor_tree_nodes')
    op.drop_index(op.f('ix_raptor_trees_tenant_id'), table_name='raptor_trees')
    op.drop_index(op.f('ix_raptor_trees_kb_id'), table_name='raptor_trees')
    op.drop_table('raptor_trees')
    op.drop_index('ix_chunks_doc_index', table_name='chunks')
    op.drop_table('chunks')
    op.drop_index('ix_embeddings_vector_ivfflat', table_name='embeddings', postgresql_using='ivfflat', postgresql_ops={'vector': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.drop_index('ix_embeddings_vector_hnsw', table_name='embeddings', postgresql_using='hnsw', postgresql_ops={'vector': 'vector_cosine_ops'})
    op.drop_index('ix_embeddings_tenant_kb_owner', table_name='embeddings')
    op.drop_index(op.f('ix_embeddings_tenant_id'), table_name='embeddings')
    op.drop_index(op.f('ix_embeddings_owner_type'), table_name='embeddings')
    op.drop_index(op.f('ix_embeddings_owner_id'), table_name='embeddings')
    op.drop_index(op.f('ix_embeddings_kb_id'), table_name='embeddings')
    op.drop_table('embeddings')
    op.drop_index(op.f('ix_documents_tenant_id'), table_name='documents')
    op.drop_index(op.f('ix_documents_kb_id'), table_name='documents')
    op.drop_table('documents')
    # ### end Alembic commands ###
